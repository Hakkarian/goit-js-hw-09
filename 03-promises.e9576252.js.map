{"mappings":"oeACA,IAAAA,EAAAC,EAAA,SCEA,SAASC,EAAcC,EAAUC,GAE/B,MAAMC,EAAgBC,KAAKC,SAAW,GAGtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAE3BC,YAAW,KAET,GAAIN,EAGF,OAAOI,EAAQ,C,SAAEN,E,MAAUC,IAI7BM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BA,E,IDbL,MAAMQ,EAAOC,SAASC,cAAc,SAuB9BC,EAAe,EAACZ,SAAEA,EAAQC,MAAEA,MAE9BJ,EAAAgB,OAAOC,QAAQ,uBAAqBd,QAAiBC,MAAU,EAG7Dc,EAAc,EAACf,SAAEA,EAAQC,MAAEA,MAE7BJ,EAAAgB,OAAOG,QAAQ,sBAAoBhB,QAAeC,MAAU,EAIhEQ,EAAKQ,iBAAiB,UA/BJC,IAEhBA,EAAEC,iBAEF,IAAIlB,MAACA,EAAKmB,KAAEA,EAAIC,OAAEA,IEZGC,EFYiBb,EET7B,IAAIa,GAAOC,QAAO,CAACC,GAAKC,KAAEA,MAE1BA,IAELD,EAAIC,GAAQC,OAAOJ,EAAMK,SAASF,GAAMG,QAGnCJ,IACN,KAXD,IAAmBF,EFcrB,IAAI,IAAIO,EAAI,EAAGA,EAAIR,EAAQQ,IAEzB9B,EAAc8B,EAAG5B,GAEd6B,KAAKlB,GAELmB,MAAMhB,GAENiB,UAED/B,GAASmB,C","sources":["src/js/03-promises.js","src/js/promise.js","src/js/dataObj.js"],"sourcesContent":["//we're importing a library for fancy notifications\nimport { Notify } from \"notiflix\";\n// a promise -------------> let's dive into it\nimport { createPromise } from './promise'\n// and  an object, feel free to check\nimport onDataObj from \"./dataObj\";\n\n//the rest is also simple - we're declaring a form\nconst form = document.querySelector('.form');\n\n//we're creatng a function, in which...\nconst onSubmit = (e) => {\n  //  ...preventing a page from reloading...\n  e.preventDefault();\n  // ...destructuring three names from form inputs...\n  let {delay, step, amount} = onDataObj(form);\n  // for each number in the amount...\n  for(let i = 0; i < amount; i++) {\n      //...we're creating a promise with dynamic delay\n    createPromise(i, delay)\n      //...if it resolves, plays happy ending\n      .then(resolvation)\n      //...if it throws an error, plays failure\n      .catch(rejectance)\n      //...execute this in any case\n      .finally();\n    //  ...and adding a step to delay for each iteration, simulating an interval\n      delay += step;\n    }\n}\n  //when resolves...\nconst resolvation = (({ position, delay }) => {\n    // ...creates a succesful notification\n    Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n}) \n  //when rejects...\nconst rejectance = (({ position, delay }) => {\n    // ...creates a, well, unsucceful notification, sounds logic\n    Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n\n  // the most important - hanging a submit listener on the form\nform.addEventListener(\"submit\", onSubmit)\n","//we're exporting only one function, by placing it into the curly braces - sure, why not?\nexport { createPromise }\n//we're creating a function with position and delay parameters, and in this function...\nfunction createPromise(position, delay) {\n  // ...we're marking the point when result should by fulfilling or outrageous\n  const shouldResolve = Math.random() > 0.3;\n  // ...we're promising our program and our program is promising us \n  // ...that will find both two options - positive and negative...\n  return new Promise((resolve, reject) => {\n    //...we're setting the timeout...\n    setTimeout(() => {\n      // ...if these unstable boundaries exist...\n      if (shouldResolve) {\n      //...it will returns with value of the resolve function \n      // and its dectructured parameters of position and delay...\n        return resolve({ position, delay });\n        //...otherwise...\n      } else {\n        //...just call for the reject function with said parameters\n      reject({ position, delay });\n    }\n  }, delay) //<----- this thing will need us to delay notifications with promises\n  })\n    \n}","//because it contains only one function, we're exporting an entire file\nexport default\n//we're creating a function with blank data, in which...\n    function onDataObj(blank) {\n    //we're spreading the data and returning its reduced version, \n    //by creating an accumulator, a dectructured name of the future form...\n    return [...blank].reduce((acc, { name }) => {\n      // ...and if this element contains name... \n        if(name) {\n        //... the name of the acc object will have the number version of the value of named elements in the form\n      acc[name] = Number(blank.elements[name].value);\n        }\n        //we're returning the acc, to have its value\n    return acc;\n  }, {}) //<------- this is an empty object and need for storing reduced data\n  }"],"names":["$eWCmQ","parcelRequire","$6ae7f9047be29c20$export$5a1eb20c68656e88","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$resolvation","Notify","success","$47d4ff9957288465$var$rejectance","failure","addEventListener","e","preventDefault","step","amount","blank","reduce","acc","name","Number","elements","value","i","then","catch","finally"],"version":3,"file":"03-promises.e9576252.js.map"}